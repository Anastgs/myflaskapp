name: Flask App CI/CD Pipeline
 
# On déclenche à chaque push ou PR sur main
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
 
env:
  IMAGE_NAME: myflaskapp:latest
 
jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
 
    steps:
    # 1) Checkout du code
    - name: Checkout repository
      uses: actions/checkout@v3
 
    # 2) Installer Kind et Kubectl
    - name: Install Kubernetes tools & kind
      run: |
        # kubectl
        curl -fsSL -o kubectl \
          "https://dl.k8s.io/release/$(curl -fsSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install kubectl /usr/local/bin/
 
        # kind
        curl -fsSL -o kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
        sudo install kind /usr/local/bin/
 
        kubectl version --client
        kind --version
 
    # 3) Créer un cluster Kind local
    - name: Create kind cluster
      run: |
        kind create cluster --name cicd-cluster
        kubectl cluster-info --context kind-cicd-cluster
 
    # 4) Build de l’image dans le Docker de Kind
    - name: Build & load Docker image into kind
      run: |
        docker build -t $IMAGE_NAME .
        kind load docker-image $IMAGE_NAME --name cicd-cluster
 
    # 5) Déployer sur le cluster Kind
    - name: Deploy Kubernetes manifests
      run: |
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/hpa.yaml
 
    # 6) Attendre que le déploiement soit prêt
    - name: Wait for deployment rollout
      run: |
        kubectl rollout status deployment/myflaskapp --timeout=120s
 
    # 7) Smoke-tests
    - name: Smoke test endpoints
      run: |
        kubectl port-forward svc/myflaskapp-service 5000:80 &
        sleep 5
        curl -f http://127.0.0.1:5000/api/events
        curl -f http://127.0.0.1:5000/api/news
 
    # 8) Nettoyage
    - name: Delete kind cluster
      if: always()
      run: kind delete cluster --name cicd-cluster